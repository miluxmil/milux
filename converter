#!/data/data/com.termux/files/usr/bin/bash

#update 2024
#Functions
#imagemagick

C='\033[1;36m'
G='\033[1;32m'
R='\033[1;31m'
Y='\033[1;33m'
B='\033[1;34m'
P='\033[1;35m'
RE='\033[0m'

#trap "ctl_c" SIGINT
message="CONVERTER | Iniciando"
cols=$(stty size | awk '{print $2}')
msg_len=${#message}
center=$(( (cols - msg_len) / 2 ))
printf "\n%.0s" {1..5}
tput cuf $center
#FORMATOS=$(ffmpeg -formats 2>/dev/null | grep E | awk '{print $2}';identify -list format | awk '{print $1}' | grep -v '^$' | sed 's/\*//g')

command -v ffmpeg > /dev/null 2>&1 || { echo >&2 "Al parecer no tienes FFMPEG, espera";sleep 2;apt install -y ffmpeg;bash $0 ; }
command -v mogrify > /dev/null 2>&1 || { echo >&2 "Al parecer no tienes imagemagick, espera" ; sleep 2 ; apt install -y imagemagick ; bash $0 ; }

function _Logo {
        clear
        echo -e "$P"
echo -e "
      \_/
     (* *)
    __)#(__
   ( )...( )(_)  $G C O N V E R T E R$P
   || |_| ||//     $G      By$P
>==() | | ()/      $G </[M]iLu{×}_> | DNP | 2024$P
    _(___)_
   [-]   [-]  $RE      Music - Video - Images
   "   

}

function ctl_c(){
_Logo
echo -e "$G Saliendo de Converter...";sleep 0.5
_Logo
echo -e "OK, BYE BYE!";exit

}


spin () {
local pid=$!
local delay=0.25
local spinner=( '█■■■■■' '■█■■■■' '■■█■■■' '■■■█■■' '■■■
■█■' '■■■■■█' )

while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do

	for i in "${spinner[@]}"
	do
		tput civis
		echo -ne "\033[1;33m\r Convirtiendo, ten paciencia......\e[33m[\033[32m$i\033[33m]\033[0m   ";
		sleep $delay
		printf "\b\b\b\b\b\b\b\b";
	done
done
printf "   \b\b\b\b\b"
tput cnorm
_Logo
printf "\e[1;36m Conversion OK..\033[1;33m ]\e\n";sleep 2;
echo "";
}

function _Menu() {
	CCV=$(cat ~/.milux/cav.mlx)
	_Logo
echo -e $G"Elije una opcion

	[$RE 1$G ]$Y Audio $G
	[$RE 2$G ]$Y Imagen $G
	[$RE 3$G ]$Y Video $G
	[$RE 4$G ]$Y Acerca de.. $G
	[$RE 9$G ]$Y Actualizar..$G
	[$RE 0$G ]$Y Salir $G
	"
	while read -p "-Milux- Convert $CCV >> " OPT && [ -z $OPT ];do
	echo -e $R"[!]$Y Debes ingresar una opcion valida    $RE";sleep 1;_Menu
done
	case $OPT in
		1)
			MODE="- Audio -";FR1=mp3;FR2=wma;FR3=ogg
			_Main
			;;
		2)
			MODE="- Imagen -";FR1=jpeg;FR2=png;FR3=jpg
			_Main
			;;
		3)
			MODE="- Video -";FR1=avi;FR2=wmv;FR3=mp4
			_Main
			;;
		4)
			_About
			;;
		9)
			_Update
			;;
		0)
			ctl_c
			;;
	esac

}


function _Main() { 
_Logo
echo -e $G"Escribe la ruta donde se encuentra\ntu archivo a convertir$RE Ejem.:$R /sdcard/MiFolder$RE"

while read -p "$MODE >> " RUTA && [ -z $RUTA ];do
	echo -e $R"[!]$Y Debes ingresar una ruta valida
$RE"
done
ls $RUTA > /dev/null 2>&1;C1=$?

if [ "$C1" = "0" ];then
	_Continue
else
	echo -e $R"[!]$Y Ruta no existe, verificala$RE";sleep 3
	bash $0
fi
}

function _Music() {
	ffmpeg -i $RUTA/"$FILE2" -y "$RUTA/${FILE2%.*}".$EXIT > /dev/null 2>&1  & spin
}

function _Image(){
	_Logo
	echo -e $G"Convirtiendo espera..."
mogrify -format $EXIT $RUTA/"$FILE2" 
}
function _Video(){
	ffmpeg -i $RUTA/"$FILE2" "$RUTA/${FILE2%.*}".$EXIT
} 

function _Multi(){
	local RUTA=$1
	_Logo
	ls -p $RUTA | grep -v / | cat -n | while read num name
do
    echo -e "${R}[${RE} ${num}${R} ]${G} ${name}${RE}"
done
	echo -e "$RE"
	read -p "Selecciona tus archivos a convertir,
	separados por espacios.                                       >> " -a OPTIONS
	FILES=()
	for INDEX in "${OPTIONS[@]}"; do
	FILE_NAME=$(ls -p "$RUTA" | grep -v / | sed "${INDEX}q;d")
	FILES+=("$FILE_NAME")
	FORMATO_ARCHIVO="${FILES##*.}"
done

if echo "$FORMATOS" | grep -q "^$FORMATO_ARCHIVO$"; then
	echo -e "$G"
	read -p "Ingresa el formato de salida, Ejemplo:$FR1, $FR2, $FR3 etc. 
>> " EXT

for FILE in "${FILES[@]}"; do
	_Logo
	echo -e $G"Archivo:$Y "$FILE" "
	ffmpeg -i "$RUTA/$FILE" -y "$RUTA/${FILE%.*}".$EXT > /dev/null 2>&1  & spin
done
_Part2

else
	_Logo
	echo -e "Algunos de los archivos que seleccionaste 
	no es compatible";sleep 3;_Continue


fi
_Part2


}

function _Part2(){
_Logo
echo -e $G"¿Que hago con archivos originales?

[$RE 1$G ]$Y Conservar$G
[$RE 2$G ]$Y Eliminar$G
[$RE 3$G ]$Y Eliminar antiguos y Mover nuevos$G
"
while read -p "$MODE >> " WDO && [ -z $WDO ];do
	echo -e $R"[!]$Y Debes ingresar una ruta valida    $RE"
done

if [ $WDO = "1" ];then
	_OK
	_Continue

elif [ $WDO = "2" ];then
	for FILE in "${FILES[@]}"; do
		rm "$RUTA/$FILE"
	done
	_OK
	_Continue

elif [ $WDO = "3" ];then
	while read -p "Ingresa la ruta destino >> " DEST && [ -z $DEST ];do
		echo -e $R"[!]$Y Debes ingresar una ruta valida    $RE"
	done
	ls $DEST > /dev/null 2>&1;C1=$?
	if [ "$C1" = "0" ];then
	for FILE in "${FILES[@]}"; do
		rm "$RUTA/$FILE"
		echo -e $RE"Moviendo:$Y ${FILE%.*}.$EXT";sleep 0.2
		mv "$RUTA/${FILE%.*}".$EXT "$DEST"
		
	done
	_Continue
else
	_Logo
	echo -e $R"Opcion invalida"
	sleep 2
	_Part2
fi
else
	echo -e $R"[!]$Y Ruta no existe, verificala$RE";sleep 3
_Part2

fi
}



function _CopyMoveDel(){
	local RUTA=$1
	_Logo
	 ls -p $RUTA | grep -v / | cat -n | while read num name
do
    echo -e "${R}[${RE} ${num}${R} ]${G} ${name}${NC}"
done
	 echo -e "$G"
	 
	 if [ "$CM" = "cp -r" ];then
		 CME="copiar"
	elif [ "$CM" = "mv" ];then
		CME="mover"
	elif [ "$CM" = "rm -rf" ];then
		CME="eliminar"
	 fi

	read -p "Selecciona archivos a $CME, separados por espacios. 
	>> " -a OPTIONS
	if [ "$CM" = "cp -r" ]||[ "$CM" = "mv" ];then
    read -p "Escribe la ruta destino >> " COPY
	fi

    FILES=()
    for INDEX in "${OPTIONS[@]}"; do
        FILE_NAME=$(ls -p "$RUTA" | grep -v / | sed "${INDEX}q;d")
        FILES+=("$FILE_NAME")
    done
    for FILE in "${FILES[@]}"; do
        echo "Copiando $FILE a $COPY"
	
	if [ "$CME" = "eliminar" ];then
		_Logo
		FILES=()
		for INDEX in "${OPTIONS[@]}"; do
		FILE_NAME=$(ls -p "$RUTA" | grep -v / | sed "${INDEX}q;d")
		FILES+=("$FILE_NAME")
	done
		for FILE in "${FILES[@]}"; do
		echo -e $G"Archivo:$RE $FILE $R"
		done
		read -p "Archivos que se van a eliminar
		¿Continuar? S/N >> " DEL
		if [ $DEL = "S" ]||[ $DEL = "s" ];then
			for FILE in "${FILES[@]}"; do
			$CM "$RUTA/$FILE"
		done
		_Logo
		echo -e $G"Eliminado(s) correctamente";sleep 2
		_Continue
		else
			_Continue
		fi
	else
        	$CM "$RUTA/$FILE" "$COPY"
		sleep 0.5
	fi

    done
    _Continue
}


function _Continue() {
	
	if [ "$MODE" = "- Audio -" ];then
		FORMATOS=$(ffmpeg -formats 2>/dev/null | grep E | awk '{print $2}')
	elif [ "$MODE" = "- Imagen -" ];then
		FORMATOS=$(identify -list format | awk '{print $1}' | grep -v '^$' | sed 's/\*//g' | while read -r line; do echo "${line,,}"; done)

	fi

	_Logo
	echo -e "$G Estas ubicado en:$RE $RUTA"
	ls -p $RUTA | grep -v / | cat -n | while read num name
do
    echo -e "${R}[${RE} ${num}${R} ]${G} ${name}${RE}"
done
	
echo -e $G"
$R[$Y r$R ]$G REFRESH   $R[$Y mu$R ]$G CONVERT MULTIPLE FILES
$R[$Y p$R ]$G NEW PATH  $R[$Y n$R ]$G NEW CONVERSION
$R[$Y c$R ]$G COPY      $R[$Y m$R ]$G MOVE      $R[$Y d$R ]$G DELETE
"
	while read -p "Selecciona una opcion >> " OPTION && [ -z $OPTION ];do
	echo -e $R"[!]$Y Debes ingresar una opcion$RE"
	done

if [ $OPTION = r ]||[ $OPTION = R ];then
	_Continue

elif [ $OPTION = p ]||[ $OPTION = P ];then
	_Main

elif [ $OPTION = n ]||[ $OPTION = N ];then
	_Menu

elif [ $OPTION = mu ]||[ $OPTION = MU ];then
	_Multi $RUTA

elif [ $OPTION = c ]||[ $OPTION = C ];then
	CM="cp -r"
	_CopyMoveDel $RUTA

elif [ $OPTION = m ]||[ $OPTION = M ];then
	CM="mv"
	_CopyMoveDel $RUTA

elif [ $OPTION = d ]||[ $OPTION = D ];then
	CM="rm -rf"
	_CopyMoveDel $RUTA

elif [ $OPTION = y ]||[ $OPTION = Y ];then
	if [ ! -f ~/bin/update ];then
		_Logo
	echo -e "Al parecer no tienes instalado YDL instalado, ¿Quieres instalarlo?"
	read enter
	fi
	
	_Logo
	echo -e "$Y Ingresa la url de tu video a descargar:$RE"
	read -p "- Milux - Downloader >> " URL
	bash /data/data/com.termux/files/home/bin/termux-url-opener $URL
	_Continue

fi

FILE2=$(ls $RUTA |sed "$OPTION q;d" |cut -d ";" -f2,6)  
FORMATO_ARCHIVO="${FILE2##*.}"
FORMAT=$(echo "$FORMATOS" | grep  "$FORMATO_ARCHIVO")

if [ "$FORMAT" = "$FORMATO_ARCHIVO" ];then
_Logo
echo -e "$Y Ingresa el formato de salida,$RE Ejemplo:$C $FR1, $FR2, $FR3 etc.$RE

$G Archivo seleccionado:$RE $FILE2 $G
"
while read -p " -Milux- convert >> " EXIT && [ -z $EXIT ];do
echo -e $R"[X]$Y No escribiste nada o Formato incopatible $RE";sleep 1
done

_Logo
echo -e $G"La informacion, es correcta? s/n"
echo -e $G"Archivo:$Y $FILE2 $RE";sleep 0.5
echo -e $G"Formato:$Y $EXIT $RE";sleep 0.5
while read -p " S o N >> " SINO && [ -z $SINO ];do                    echo -e $R"[X]$Y No escribiste nada$C"
	sleep 1
done

if [ $SINO = "s" ] || [ $SINO = "S" ] || [ $SINO = "y" ] || [ $SINO = "Y" ];then
	echo -e "$G "
	if [ "$MODE" = "- Audio -" ];then
		_Music
	elif [ "$MODE" = "- Imagen -" ];then
		_Image
	elif [ "$MODE" = "- Video -" ];then
		_Video
	fi

	_Logo
	echo -e $G"Archivo original:$RE "$FILE2""
	echo -e $G"Deseas conservar el archivo original?"
	read -p "s/n >> " SN
	if [ $SN = "s" ] || [ $SN = "S" ];then
		_OK
		_Continue
	elif [ $SN = "n" ] || [ $SN = "N" ];then
		rm "$RUTA/$FILE2"
		_OK
		_Continue
	else
		_Logo
		echo -e "Opcion invalida"
		sleep 2
		_Continue
	fi
elif [ $SINO = "n" ] || [ $SINO = "N" ];then
	_Continue
fi

else
	_Logo
	echo -e "Algun archivo(s) que seleccionaste
	no es compatible(s)";sleep 3;_Continue

fi
}

function _OK() {
	_Logo
	echo -e "$Y Convertido correctamente!\n Guardado como...$G ${FILE2%.*}.$EXIT\n$Y En:$G $RUTA $RE"
	read -n 1 -p "ENTER To continue.."
}

function _Error() {
	_Logo
	echo -e "$R[!]$Y Ocurrio un error vuelve a intentarlo!"
	sleep 3;bash $0
}

function _About(){
	clear
	echo -e $G"
	            C O N V E R T E R
		           by
		</[M]iLu{×}_> | DNP | 2021

   CONVERTER$RE Creado para DNP (Developer New Programmers)
              Desarrollado por$G </[M]iLu{×}_>$RE
        para el canal$G https://t.me/Ivam3by_Cinderella$RE
	        bot ayuda$G https://t.me/Ivam3_Bot$RE
	
      	  Este script esta creado para facilitar
        el cambio de formatos multimedia, utilizando
    FFMPEG e Imagemagick  para su correcto funcionamiento

		¡GRACIAS POR INSTALAR CONVERTER!
  $C             </[M]iLu{×}_>$G https://t.me/miluxmil$RE
    "
    read -n 1 -p "ENTER To Continue.."
    bash $0
}


function _Update() {
    _Logo
    echo "Verificando conexión a internet..."
    sleep 2

    # Verificar conexión a internet
    if ping -q -c 1 -W 1 8.8.8.8 > /dev/null; then
        _Logo
        echo "Conexión a internet disponible."
        sleep 2
        _Logo

        # Crear directorio si no existe
        mkdir -p ~/.milux

        # Crear archivo de versión si no existe
        [ ! -f ~/.milux/cav.mlx ] && echo "V-2.0" > ~/.milux/cav.mlx

        echo -e $G"Espera mientras busco la última versión..."
        sleep 2

        # Descargar la versión más reciente
        curl -s -o ~/.milux/ccv.mlx https://raw.githubusercontent.com/miluxmil/milux/master/CCV

        # Leer las versiones
        CAV=$(<~/.milux/cav.mlx)   # Versión actual instalada
        CCV=$(<~/.milux/ccv.mlx)   # Versión más reciente del servidor

        if [ "$CAV" == "$CCV" ]; then
            _Logo
            echo -e $G"Tienes la última versión$RE"
            sleep 2
        else
            _Logo
            echo -e $G"Nueva versión encontrada!\nActualizando..."
            sleep 2

            # Guardar la ruta actual y cambiar a ~/.milux
            PW=$(pwd)
            cd ~/.milux/

            # Descargar e instalar la nueva versión
            curl -s -o converter https://raw.githubusercontent.com/miluxmil/milux/master/converter
            chmod 777 converter
            mv converter $PREFIX/bin/

            # Volver a la ruta anterior
            cd "$PW"

            # Actualizar el archivo de versión
            mv ~/.milux/ccv.mlx ~/.milux/cav.mlx

            _Logo
            echo -e $G"Actualizado correctamente"
            sleep 2
        fi

        # Ejecutar el script principal
        bash "$0"
    else
        _Logo
        echo "No hay conexión a internet. Regresando..."
        sleep 2
        _Menu
    fi
}

trap "ctl_c" SIGINT

#clear
for (( i=0; i<msg_len; i++ )); do
	echo -n "${message:$i:1}"
	sleep 0.1
done
echo;sleep 2
_Menu
