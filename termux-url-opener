#!/data/data/com.termux/files/usr/bin/bash
# Copyright 2021 ::milux::
URL=$1
source ~/bin/update
_Colors
if [ "$URL" = "--install" ];then
	command -v wget > /dev/null 2>&1 || { echo >&2 "Installing WGET";sleep 2; apt install wget -y; }
	wget https://raw.githubusercontent.com/miluxmil/milux/master/installer > /dev/null 2>&1
	bash installer;rm installer
fi

C='\033[1;36m'
G='\033[1;32m'
R='\033[1;31m'
Y='\033[1;33m'
B='\033[1;34m'
P='\033[1;35m'
RE='\033[0m'
VA=$(cat ~/.milux/vcv)
RUTA=/sdcard/youtube/
echo "$1" > url
TRACK=$(cat url |grep track);TRAK=$?
rm url


###################  FUNCTIONS #####################
function logo {
	clear
	echo -e $G "
##############################################
##                                          ##
##$RE      Y D L  -  D O W N L O A D E R$G       ##
##$R                            by -Milux-$G    ##
##                                          ##
##$RE   Youtube   -  Spotify   -   Dalymotion$G  ##
##$RE         Facebook   -    TikTok  $G         ##
##############################################
                       $RE       Version:$B $VA $G
//////////////////////////////////////////////"
echo -e "$RE"
}

function EXIT {
	logo
rm ~/.milux/formats.mlx
echo -e $G"Se ha descargado con Exito!$RE"
}

function FORMATS {
    echo -e $G"[$RE 1$G ]$Y Descargar en MP3$RE"
    
    # Verificar formatos por resoluciÃ³n (no por ID)
    check_format() {
        local height="$1"
        local option="$2"
        local label="$3"
        
        if grep -qE "\s${height}x[0-9]+\s|\s[0-9]+x${height}\s" ~/.milux/formats.mlx; then
            echo -e $G"[$RE $option$G ]$Y Descargar en $label$RE"
        else
            echo -e $G"[$RE X$G ]$R $label No Disponible$RE"
        fi
    }

    check_format "240" "2" "426x240 - 240p"
    check_format "360" "3" "640x360 - 360p"
    check_format "480" "4" "854x480 - 480p"
    check_format "720" "5" "1280x720 - 720p"
    check_format "1080" "6" "1920x1080 - 1080p"
    check_format "1440" "7" "2560x1440 - 1440p"
    check_format "2160" "8" "3840x2160 - 4K"

    echo -e $G"[$RE U$G ]$Y Buscar la ultima version$RE"
    echo -e $G"[$RE F$G ]$Y Repar script$RE"
    echo -e $G"[$RE A$G ]$Y Acerca de.."
    echo -e $G"[$RE X$G ]$Y Salir $RE"
}


################ END FUNCTIONS ######################

############## SPOTIFY #######################
#https://open.spotify.com/track/7vrJn5hDSXRmdXoR30KgF1?si=zWMX5hh2Q1Gk5wSqPWsydA&utm_source=copy-link&dl_branch=1
if [[ $URL == *"open.spotify.com"* ]]; then

    UPO=1
    SONG_DIR="/sdcard/youtube/spotify"
    logo
    echo -e $G "Spotify$RE"

    if [[ ! -d $SONG_DIR ]]; then
        mkdir $SONG_DIR
    fi
    
	spotifydl  $URL  -o $SONG_DIR;OK=$?
if [ $OK = "0" ];then
   _OK
else
	_ERROR
fi


################## YOUTUBE ###################

elif [[ $URL == *"youtu.be"* ]] || [[ $URL == *"youtube.com"* ]]; then
	UPO=2
logo
yt-dlp -F $1 > /dev/null 2>&1 > ~/.milux/formats.mlx  & spin
FORMATS
echo -e $G"
[$Y !$G ]$RE SI TODAS LAS OPCIONES ES: [ NO DISPONIBLE ] REINTENTA"
command='--no-warnings -no-mtime -o /data/data/com.termux/files/home/storage/shared/Youtube/%(title)s.%(ext)s -f'

read -p "-Milux- >> " option
if [ $option = "U" ] || [ $option = "u" ];then
	UPDATE
	bash $0 $1
fi

if [ $option = "X" ] || [ $option = "x" ];then
    exit
fi
if [ $option = "A" ] || [ $option = "a" ];then
	_About
	bash $0 $1
fi

echo
echo -e $G"Descargando..$RE"
if [ "$option" -eq "1" ];then
	_MP3

    if [ "$M" = "0" ];then
	_OK
    else
	_ERROR
    fi

elif [ "$option" -eq "2" ];then
	RES=240
	_DMEDIA

elif [ "$option" -eq "3" ];then
	RES=360
	_DMEDIA

elif [ "$option" -eq "4" ];then
	RES=480
	_DMEDIA

elif [ "$option" -eq "5" ];then
	RES=720
	_DMEDIA

elif [ "$option" -eq "6" ];then
	RES=1080

elif [ "$option" -eq "7" ];then
	RES=1440

elif [ "$option" -eq "8" ];then
	RES=2160

elif [ "$option" = "F" ] || [ "$option" = "f" ];then
	_FIX
	bash $0 $1

fi

################### END YOUTUBE ###################


elif [[ $URL == *"dailymotion.com"* ]]; then
	UPO=3
	logo
	echo -e $G"dailymotion - espera.. Obteniendo formatos$RE
	"
	youtube-dl -F $URL  > dtmp

CHD=$(cat dtmp |grep -e http-1080 -e hls-1080-0 -e hls-1080-1 |awk '{print $1}' |sed '1d')
CHD1=$(cat dtmp |grep -e http-720 -e hls-720-0 -e hls-720-1 |awk '{print $1}')
cat dtmp |grep -e http-1080 -e hls-720-0 -e hls-720-1 > /dev/null 2>&1; D1080=$?
cat dtmp |grep -e http-720 -e hls-720-0 -e hls-720-1 > /dev/null 2>&1; D720=$?
cat dtmp |grep -e http-480 -e hls-480-0 -e hls-480-1 > /dev/null 2>&1; D480=$?
cat dtmp |grep -e http-380 -e hls-380-0 -e hls-380-1 > /dev/null 2>&1; D380=$?
cat dtmp |grep -e http-240 -e hls-240-0 -e hls-240-1 > /dev/null 2>&1; D240=$?

rm -rf dtmp
if [ $D1080 = 0 ];then
 echo -e $G"[$RE 1$G ]$Y Video calidad 1080p"
fi
if [ $D720 = 0 ];then
echo -e $G"[$RE 2$G ]$Y Video calidad 720p"
fi
if [ $D480 = 0 ];then
echo -e $G"[$RE 3$G ]$Y Video calidad 480p"
fi
if [ $D380 = 0 ];then
echo -e $G"[$RE 4$G ]$Y Video calidad 380p"
fi
if [ $D240 = 0 ];then
echo -e $G"[$RE 5$G ]$Y Video calidad 240p$G"
fi
read -p "
Selecciona una opcion >> " DOPT
if [ $DOPT = 1 ];then
	youtube-dl -f $CHD $URL
	echo -e $G"Listo!  "
	sleep 2
	read enter
elif [ $DOPT = 2 ];then
	youtube-dl -f $CHD1 $URL
	echo -e $G"Listo!  "
	sleep 2
elif [ $DOPT = 3 ];then
	youtube-dl -f http-480 $URL
	echo -e $G"Listo!  "
	sleep 2
elif [ $DOPT = 4 ];then
	youtube-dl -f http-380 $URL
	echo -e $G"Listo!  "
	sleep 2
elif [ $DOPT = 5 ];then
	youtube-dl -f http-240 $URL
	echo -e $G"Listo!  "
	sleep 2
fi

################## tiktok ###################

elif [[ $URL == *"vm.tiktok.com"* ]]; then
	UPO=4
	logo
	echo -e $G"TikTok - Descargando.."
	youtube-dl -f 0 $1;CH=$?
	if [ $CH = 0 ];then
		_OK
	else
		_ERROR
	fi

fi
